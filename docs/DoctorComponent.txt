/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.napalmvin.neuro_log_vui.ui.doctor;

import com.vaadin.data.Property;
import com.vaadin.data.Validator;
import com.vaadin.server.FontAwesome;
import com.vaadin.spring.annotation.SpringComponent;
import com.vaadin.ui.AbstractComponent;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import java.util.Collection;
import java.util.ResourceBundle;
import org.napalmvin.neuro_log_vui.entities.Doctor;

/**
 *
 * @author LOL
 */
@SpringComponent
public class DoctorComponent extends CustomComponent implements Field <Doctor>{

    private final Button button;
    private boolean isReqired=false;
    private final TextField textField;
    private ResourceBundle msg;
    private Doctor doctor;

    public DoctorComponent(ResourceBundle msg) {
        this.msg=msg;
        HorizontalLayout hLayout=new HorizontalLayout();
        textField = new TextField();
        button=new Button(msg.getString("find"), FontAwesome.SEARCH);
        hLayout.addComponents(textField,button);
        Panel panel = new Panel("");
        hLayout.setMargin(true); // Very useful
        panel.setContent(hLayout);

        // Compose from multiple components

        // Set the size as undefined at all levels
        hLayout.setSizeUndefined();
        panel.setSizeUndefined();
        setSizeUndefined();

        // The composition root MUST be set
        setCompositionRoot(panel);
        
    }

    @Override
    public boolean isRequired() {
      return textField.isRequired();
    }

    @Override
    public void setRequired(boolean required) {
        textField.setRequired(required);
    }

    @Override
    public void setRequiredError(String requiredMessage) {
        textField.setRequiredError(requiredMessage);
    }

    @Override
    public String getRequiredError() {
        return textField.getRequiredError();
    }

    @Override
    public boolean isEmpty() {
        return textField.isEmpty();
    }

    @Override
    public void clear() {
        textField.clear();
    }

    @Override
    public boolean isInvalidCommitted() {
       return textField.isInvalidCommitted();
    }

    @Override
    public void setInvalidCommitted(boolean isCommitted) {
        textField.setInvalidCommitted(isCommitted);
    }

    @Override
    public void commit() throws SourceException, Validator.InvalidValueException {
        textField.commit();
    }

    @Override
    public void discard() throws SourceException {
        textField.discard();
    }

    @Override
    public void setBuffered(boolean buffered) {
        textField.setBuffered(buffered);
    }

    @Override
    public boolean isBuffered() {
        return textField.isBuffered();
    }

    @Override
    public boolean isModified() {
        return textField.isModified();
    }

    @Override
    public void addValidator(Validator validator) {
        textField.addValidator(validator);
    }

    @Override
    public void removeValidator(Validator validator) {
        textField.removeValidator(validator);
    }

    @Override
    public void removeAllValidators() {
        textField.removeAllValidators();
    }

    @Override
    public Collection<Validator> getValidators() {
        return textField.getValidators();
    }

    @Override
    public boolean isValid() {
        return textField.isValid();
    }

    @Override
    public void validate() throws Validator.InvalidValueException {
        textField.validate();
    }

    @Override
    public boolean isInvalidAllowed() {
        return textField.isInvalidAllowed();
    }

    @Override
    public void setInvalidAllowed(boolean invalidValueAllowed) throws UnsupportedOperationException {
        textField.setInvalidAllowed(invalidValueAllowed);
    }

    @Override
    public Doctor getValue() {
        return doctor;
    }

    @Override
    public void setValue(Doctor newValue) throws ReadOnlyException {
        doctor=newValue;
        textField.setValue(newValue.toString());
    }

    @Override
    public Class<? extends Doctor> getType() {
        return Doctor.class;
    }

    @Override
    public void addValueChangeListener(ValueChangeListener listener) {
        textField.addValueChangeListener(listener);
    }

    @Override
    public void addListener(ValueChangeListener listener) {
         textField.addValueChangeListener(listener);
    }

    @Override
    public void removeValueChangeListener(ValueChangeListener listener) {
         textField.removeValueChangeListener(listener);
    }

    @Override
    public void removeListener(ValueChangeListener listener) {
        textField.removeValueChangeListener(listener);
    }

    @Override
    public void valueChange(Property.ValueChangeEvent event) {
         textField.valueChange(event);
    }

    @Override
    public void setPropertyDataSource(Property newDataSource) {
        textField.setPropertyDataSource(newDataSource);
    }

    @Override
    public Property getPropertyDataSource() {
         return textField.getPropertyDataSource();
    }

    @Override
    public int getTabIndex() {
         return button.getTabIndex();
    }

    @Override
    public void setTabIndex(int tabIndex) {
         button.setTabIndex(tabIndex);
    }

    @Override
    public void focus() {
        button.focus();
    }
    
    
    
}
